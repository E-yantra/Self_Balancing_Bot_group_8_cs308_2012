
7A_ADC_IRWLBAT_Sensor_display_On_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000590  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000017  00800060  00800060  00000604  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000209  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a6f  00000000  00000000  0000082d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000213  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008cc  00000000  00000000  000014af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  00001d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000307  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000031d  00000000  00000000  000021f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 37       	cpi	r26, 0x77	; 119
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 04 02 	call	0x408	; 0x408 <main>
  74:	0c 94 c6 02 	jmp	0x58c	; 0x58c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7c:	83 e3       	ldi	r24, 0x33	; 51
  7e:	97 e0       	ldi	r25, 0x07	; 7
  80:	fc 01       	movw	r30, r24
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  86:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  88:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
  8a:	40 e3       	ldi	r20, 0x30	; 48
  8c:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  8e:	aa 9a       	sbi	0x15, 2	; 21
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	34 e2       	ldi	r19, 0x24	; 36
  94:	f9 01       	movw	r30, r18
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  9a:	aa 98       	cbi	0x15, 2	; 21
  9c:	fc 01       	movw	r30, r24
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  a2:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  a4:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
  a6:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  a8:	aa 9a       	sbi	0x15, 2	; 21
  aa:	f9 01       	movw	r30, r18
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_set_4bit+0x30>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  b0:	aa 98       	cbi	0x15, 2	; 21
  b2:	fc 01       	movw	r30, r24
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  b8:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  ba:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
  bc:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  be:	aa 9a       	sbi	0x15, 2	; 21
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_set_4bit+0x46>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  c6:	aa 98       	cbi	0x15, 2	; 21
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  cc:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  ce:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  d4:	aa 9a       	sbi	0x15, 2	; 21
  d6:	c9 01       	movw	r24, r18
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  dc:	aa 98       	cbi	0x15, 2	; 21
}
  de:	08 95       	ret

000000e0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
  e0:	95 b3       	in	r25, 0x15	; 21
  e2:	9f 70       	andi	r25, 0x0F	; 15
  e4:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
  e6:	25 b3       	in	r18, 0x15	; 21
  e8:	98 2f       	mov	r25, r24
  ea:	90 7f       	andi	r25, 0xF0	; 240
  ec:	92 2b       	or	r25, r18
  ee:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
  f0:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
  f2:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
  f4:	aa 9a       	sbi	0x15, 2	; 21
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	34 e2       	ldi	r19, 0x24	; 36
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
 100:	aa 98       	cbi	0x15, 2	; 21
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 102:	95 b3       	in	r25, 0x15	; 21
 104:	9f 70       	andi	r25, 0x0F	; 15
 106:	95 bb       	out	0x15, r25	; 21
	lcd_port |= cmd;
 108:	95 b3       	in	r25, 0x15	; 21
 10a:	82 95       	swap	r24
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	98 2b       	or	r25, r24
 110:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
 112:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 114:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 116:	aa 9a       	sbi	0x15, 2	; 21
 118:	c9 01       	movw	r24, r18
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
 11e:	aa 98       	cbi	0x15, 2	; 21
}
 120:	08 95       	ret

00000122 <lcd_init>:
 122:	83 e3       	ldi	r24, 0x33	; 51
 124:	97 e0       	ldi	r25, 0x07	; 7
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x4>
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
 12a:	88 e2       	ldi	r24, 0x28	; 40
 12c:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
 13c:	8e e0       	ldi	r24, 0x0E	; 14
 13e:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
}
 148:	08 95       	ret

0000014a <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 14a:	95 b3       	in	r25, 0x15	; 21
 14c:	9f 70       	andi	r25, 0x0F	; 15
 14e:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
 150:	25 b3       	in	r18, 0x15	; 21
 152:	98 2f       	mov	r25, r24
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	92 2b       	or	r25, r18
 158:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
 15a:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 15c:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 15e:	aa 9a       	sbi	0x15, 2	; 21
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	34 e2       	ldi	r19, 0x24	; 36
 164:	f9 01       	movw	r30, r18
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
 16a:	aa 98       	cbi	0x15, 2	; 21

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 16c:	95 b3       	in	r25, 0x15	; 21
 16e:	9f 70       	andi	r25, 0x0F	; 15
 170:	95 bb       	out	0x15, r25	; 21
	lcd_port |= letter;
 172:	95 b3       	in	r25, 0x15	; 21
 174:	82 95       	swap	r24
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	98 2b       	or	r25, r24
 17a:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
 17c:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 17e:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 180:	aa 9a       	sbi	0x15, 2	; 21
 182:	c9 01       	movw	r24, r18
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
 188:	aa 98       	cbi	0x15, 2	; 21
}
 18a:	08 95       	ret

0000018c <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
}
 192:	08 95       	ret

00000194 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	ec 01       	movw	r28, r24
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 19c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
		str++;
 1a0:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 1a2:	88 81       	ld	r24, Y
 1a4:	88 23       	and	r24, r24
 1a6:	d1 f7       	brne	.-12     	; 0x19c <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	69 f0       	breq	.+26     	; 0x1cc <lcd_cursor+0x1e>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	18 f4       	brcc	.+6      	; 0x1bc <lcd_cursor+0xe>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	a9 f4       	brne	.+42     	; 0x1e4 <lcd_cursor+0x36>
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <lcd_cursor+0x18>
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	49 f0       	breq	.+18     	; 0x1d2 <lcd_cursor+0x24>
 1c0:	84 30       	cpi	r24, 0x04	; 4
 1c2:	81 f4       	brne	.+32     	; 0x1e4 <lcd_cursor+0x36>
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 1c6:	86 2f       	mov	r24, r22
 1c8:	81 58       	subi	r24, 0x81	; 129
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 1cc:	86 2f       	mov	r24, r22
 1ce:	81 54       	subi	r24, 0x41	; 65
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
 1d2:	86 2f       	mov	r24, r22
 1d4:	8d 56       	subi	r24, 0x6D	; 109
 1d6:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
 1da:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 1dc:	86 2f       	mov	r24, r22
 1de:	8d 52       	subi	r24, 0x2D	; 45
 1e0:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
 1e4:	08 95       	ret

000001e6 <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	8a 01       	movw	r16, r20
 1f0:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 1f2:	88 23       	and	r24, r24
 1f4:	11 f0       	breq	.+4      	; 0x1fa <lcd_print+0x14>
 1f6:	66 23       	and	r22, r22
 1f8:	19 f4       	brne	.+6      	; 0x200 <lcd_print+0x1a>
	{
		lcd_home();
 1fa:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_home>
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 200:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_cursor>
	}
	if(digits==5 || flag==1)
 204:	c5 30       	cpi	r28, 0x05	; 5
 206:	d1 05       	cpc	r29, r1
 208:	71 f4       	brne	.+28     	; 0x226 <lcd_print+0x40>
	{
		million=value/10000+48;
 20a:	c8 01       	movw	r24, r16
 20c:	60 e1       	ldi	r22, 0x10	; 16
 20e:	77 e2       	ldi	r23, 0x27	; 39
 210:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 214:	cb 01       	movw	r24, r22
 216:	c0 96       	adiw	r24, 0x30	; 48
 218:	90 93 63 00 	sts	0x0063, r25
 21c:	80 93 62 00 	sts	0x0062, r24
		lcd_wr_char(million);
 220:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
 224:	05 c0       	rjmp	.+10     	; 0x230 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
 226:	c4 30       	cpi	r28, 0x04	; 4
 228:	d1 05       	cpc	r29, r1
 22a:	11 f0       	breq	.+4      	; 0x230 <lcd_print+0x4a>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	16 c0       	rjmp	.+44     	; 0x25c <lcd_print+0x76>
	{
		temp = value/1000;
 230:	c8 01       	movw	r24, r16
 232:	68 ee       	ldi	r22, 0xE8	; 232
 234:	73 e0       	ldi	r23, 0x03	; 3
 236:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 23a:	cb 01       	movw	r24, r22
 23c:	60 93 64 00 	sts	0x0064, r22
 240:	90 93 65 00 	sts	0x0065, r25
		thousand = temp%10 + 48;
 244:	6a e0       	ldi	r22, 0x0A	; 10
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 24c:	c0 96       	adiw	r24, 0x30	; 48
 24e:	90 93 74 00 	sts	0x0074, r25
 252:	80 93 73 00 	sts	0x0073, r24
		lcd_wr_char(thousand);
 256:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
 25a:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
 25c:	c3 30       	cpi	r28, 0x03	; 3
 25e:	d1 05       	cpc	r29, r1
 260:	21 f0       	breq	.+8      	; 0x26a <lcd_print+0x84>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	11 f0       	breq	.+4      	; 0x26a <lcd_print+0x84>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	16 c0       	rjmp	.+44     	; 0x296 <lcd_print+0xb0>
	{
		temp = value/100;
 26a:	c8 01       	movw	r24, r16
 26c:	64 e6       	ldi	r22, 0x64	; 100
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 274:	cb 01       	movw	r24, r22
 276:	60 93 64 00 	sts	0x0064, r22
 27a:	90 93 65 00 	sts	0x0065, r25
		hundred = temp%10 + 48;
 27e:	6a e0       	ldi	r22, 0x0A	; 10
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 286:	c0 96       	adiw	r24, 0x30	; 48
 288:	90 93 6f 00 	sts	0x006F, r25
 28c:	80 93 6e 00 	sts	0x006E, r24
		lcd_wr_char(hundred);
 290:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
 294:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
 296:	c2 30       	cpi	r28, 0x02	; 2
 298:	d1 05       	cpc	r29, r1
 29a:	21 f0       	breq	.+8      	; 0x2a4 <lcd_print+0xbe>
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	11 f0       	breq	.+4      	; 0x2a4 <lcd_print+0xbe>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	16 c0       	rjmp	.+44     	; 0x2d0 <lcd_print+0xea>
	{
		temp = value/10;
 2a4:	c8 01       	movw	r24, r16
 2a6:	6a e0       	ldi	r22, 0x0A	; 10
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 2ae:	cb 01       	movw	r24, r22
 2b0:	60 93 64 00 	sts	0x0064, r22
 2b4:	90 93 65 00 	sts	0x0065, r25
		tens = temp%10 + 48;
 2b8:	6a e0       	ldi	r22, 0x0A	; 10
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 2c0:	c0 96       	adiw	r24, 0x30	; 48
 2c2:	90 93 6a 00 	sts	0x006A, r25
 2c6:	80 93 69 00 	sts	0x0069, r24
		lcd_wr_char(tens);
 2ca:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
 2d0:	c1 30       	cpi	r28, 0x01	; 1
 2d2:	d1 05       	cpc	r29, r1
 2d4:	11 f0       	breq	.+4      	; 0x2da <lcd_print+0xf4>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	61 f4       	brne	.+24     	; 0x2f2 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
 2da:	c8 01       	movw	r24, r16
 2dc:	6a e0       	ldi	r22, 0x0A	; 10
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 2e4:	c0 96       	adiw	r24, 0x30	; 48
 2e6:	90 93 72 00 	sts	0x0072, r25
 2ea:	80 93 71 00 	sts	0x0071, r24
		lcd_wr_char(unit);
 2ee:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
	}
	if(digits>5)
 2f2:	26 97       	sbiw	r28, 0x06	; 6
 2f4:	1c f0       	brlt	.+6      	; 0x2fc <lcd_print+0x116>
	{
		lcd_wr_char('E');
 2f6:	85 e4       	ldi	r24, 0x45	; 69
 2f8:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
	}
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	08 95       	ret

00000306 <lcd_port_config>:
unsigned char vel;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
 306:	84 b3       	in	r24, 0x14	; 20
 308:	87 6f       	ori	r24, 0xF7	; 247
 30a:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
 30c:	85 b3       	in	r24, 0x15	; 21
 30e:	80 78       	andi	r24, 0x80	; 128
 310:	85 bb       	out	0x15, r24	; 21
}
 312:	08 95       	ret

00000314 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 314:	98 b3       	in	r25, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 316:	90 7f       	andi	r25, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	89 2b       	or	r24, r25
 PORTB = PortBRestore; 			// setting the command to the port
 31c:	88 bb       	out	0x18, r24	; 24
}
 31e:	08 95       	ret

00000320 <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 320:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 322:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 324:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
 326:	88 bb       	out	0x18, r24	; 24
}

void forward (void) //both wheels forward
{
  motion_set(0x06);
}
 328:	08 95       	ret

0000032a <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 32a:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 32c:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 32e:	89 60       	ori	r24, 0x09	; 9
 PORTB = PortBRestore; 			// setting the command to the port
 330:	88 bb       	out	0x18, r24	; 24
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
 332:	08 95       	ret

00000334 <soft_stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 334:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 336:	8f 60       	ori	r24, 0x0F	; 15
 PORTB = PortBRestore; 			// setting the command to the port
 338:	88 bb       	out	0x18, r24	; 24
}

void soft_stop (void)    //hard stop (Stop slowly)
{
  motion_set(0x0F);
}
 33a:	08 95       	ret

0000033c <timer1_init>:

void timer1_init(void)
{
 TCCR1B = 0x00; //stop
 33c:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xFF; //higher byte constant frequency value of PWM cycle 
 33e:	9f ef       	ldi	r25, 0xFF	; 255
 340:	9d bd       	out	0x2d, r25	; 45
 TCNT1L = 0x01; //lower byte constant frequency value of PWM cycle 
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	8c bd       	out	0x2c, r24	; 44
 OCR1AH = 0x00;
 346:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0xFF;
 348:	9a bd       	out	0x2a, r25	; 42
 OCR1BH = 0x00;
 34a:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0xFF;
 34c:	98 bd       	out	0x28, r25	; 40
 ICR1H  = 0x00;
 34e:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0xFF;
 350:	96 bd       	out	0x26, r25	; 38
 TCCR1A = 0xA1;
 352:	81 ea       	ldi	r24, 0xA1	; 161
 354:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x0D; //start Timer
 356:	8d e0       	ldi	r24, 0x0D	; 13
 358:	8e bd       	out	0x2e, r24	; 46
}
 35a:	08 95       	ret

0000035c <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;  //set PORTA direction as input
 35c:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00; //set PORTA pins floating
 35e:	1b ba       	out	0x1b, r1	; 27
}
 360:	08 95       	ret

00000362 <motion_pin_config>:

void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
 362:	87 b3       	in	r24, 0x17	; 23
 364:	8f 60       	ori	r24, 0x0F	; 15
 366:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; //set initial value of the PORTB3 to PORTB0 pins to logic 0
 368:	88 b3       	in	r24, 0x18	; 24
 36a:	80 7f       	andi	r24, 0xF0	; 240
 36c:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
 36e:	81 b3       	in	r24, 0x11	; 17
 370:	80 63       	ori	r24, 0x30	; 48
 372:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
 374:	82 b3       	in	r24, 0x12	; 18
 376:	80 63       	ori	r24, 0x30	; 48
 378:	82 bb       	out	0x12, r24	; 18
}
 37a:	08 95       	ret

0000037c <port_init>:
 PORTA = 0x00; //set PORTA pins floating
}

void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
 37c:	87 b3       	in	r24, 0x17	; 23
 37e:	8f 60       	ori	r24, 0x0F	; 15
 380:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; //set initial value of the PORTB3 to PORTB0 pins to logic 0
 382:	88 b3       	in	r24, 0x18	; 24
 384:	80 7f       	andi	r24, 0xF0	; 240
 386:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
 388:	81 b3       	in	r24, 0x11	; 17
 38a:	80 63       	ori	r24, 0x30	; 48
 38c:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
 38e:	82 b3       	in	r24, 0x12	; 18
 390:	80 63       	ori	r24, 0x30	; 48
 392:	82 bb       	out	0x12, r24	; 18
unsigned char vel;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
 394:	84 b3       	in	r24, 0x14	; 20
 396:	87 6f       	ori	r24, 0xF7	; 247
 398:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
 39a:	85 b3       	in	r24, 0x15	; 21
 39c:	80 78       	andi	r24, 0x80	; 128
 39e:	85 bb       	out	0x15, r24	; 21
}

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;  //set PORTA direction as input
 3a0:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00; //set PORTA pins floating
 3a2:	1b ba       	out	0x1b, r1	; 27
void port_init()
{
 motion_pin_config();
 lcd_port_config();
 adc_pin_config();	
}
 3a4:	08 95       	ret

000003a6 <adc_init>:

//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
 3a6:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 3a8:	80 e2       	ldi	r24, 0x20	; 32
 3aa:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
 3ac:	80 e8       	ldi	r24, 0x80	; 128
 3ae:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 3b0:	86 e8       	ldi	r24, 0x86	; 134
 3b2:	86 b9       	out	0x06, r24	; 6
}
 3b4:	08 95       	ret

000003b6 <ADC_Conversion>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
 3b6:	87 70       	andi	r24, 0x07	; 7
 3b8:	80 62       	ori	r24, 0x20	; 32
 3ba:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 3bc:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
 3be:	34 9b       	sbis	0x06, 4	; 6
 3c0:	fe cf       	rjmp	.-4      	; 0x3be <ADC_Conversion+0x8>
 a=ADCH;
 3c2:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 3c4:	34 9a       	sbi	0x06, 4	; 6
 return a;
}
 3c6:	08 95       	ret

000003c8 <velocity>:
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
 3c8:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor;     // duty cycle 'ON' period of PWM out for Left motor 
 3ca:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
 3cc:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;    // duty cycle 'ON' period of PWM out for Right motor 
 3ce:	68 bd       	out	0x28, r22	; 40
}
 3d0:	08 95       	ret

000003d2 <init_devices>:



void init_devices (void)
{
 cli();           //Clears the global interrupts
 3d2:	f8 94       	cli
 port_init();
 3d4:	0e 94 be 01 	call	0x37c	; 0x37c <port_init>
}

//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
 3d8:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 3da:	80 e2       	ldi	r24, 0x20	; 32
 3dc:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
 3de:	80 e8       	ldi	r24, 0x80	; 128
 3e0:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 3e2:	86 e8       	ldi	r24, 0x86	; 134
 3e4:	86 b9       	out	0x06, r24	; 6
  motion_set(0x0F);
}

void timer1_init(void)
{
 TCCR1B = 0x00; //stop
 3e6:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xFF; //higher byte constant frequency value of PWM cycle 
 3e8:	9f ef       	ldi	r25, 0xFF	; 255
 3ea:	9d bd       	out	0x2d, r25	; 45
 TCNT1L = 0x01; //lower byte constant frequency value of PWM cycle 
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	8c bd       	out	0x2c, r24	; 44
 OCR1AH = 0x00;
 3f0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0xFF;
 3f2:	9a bd       	out	0x2a, r25	; 42
 OCR1BH = 0x00;
 3f4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0xFF;
 3f6:	98 bd       	out	0x28, r25	; 40
 ICR1H  = 0x00;
 3f8:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0xFF;
 3fa:	96 bd       	out	0x26, r25	; 38
 TCCR1A = 0xA1;
 3fc:	81 ea       	ldi	r24, 0xA1	; 161
 3fe:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x0D; //start Timer
 400:	8d e0       	ldi	r24, 0x0D	; 13
 402:	8e bd       	out	0x2e, r24	; 46
{
 cli();           //Clears the global interrupts
 port_init();
 adc_init();
 timer1_init();
 sei();           //Enables the global interrupts
 404:	78 94       	sei
}
 406:	08 95       	ret

00000408 <main>:

//Main Function
int main(void)
{
 408:	2f 92       	push	r2
 40a:	3f 92       	push	r3
 40c:	4f 92       	push	r4
 40e:	5f 92       	push	r5
 410:	6f 92       	push	r6
 412:	7f 92       	push	r7
 414:	8f 92       	push	r8
 416:	9f 92       	push	r9
 418:	af 92       	push	r10
 41a:	bf 92       	push	r11
 41c:	cf 92       	push	r12
 41e:	df 92       	push	r13
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	df 93       	push	r29
 42a:	cf 93       	push	r28
 42c:	00 d0       	rcall	.+0      	; 0x42e <main+0x26>
 42e:	00 d0       	rcall	.+0      	; 0x430 <main+0x28>
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
 int error9 = 0;
 
 int error_i = 0;
 int error_d = 0;
 
 init_devices();
 434:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <init_devices>
 lcd_set_4bit();
 438:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_set_4bit>
 lcd_init();
 43c:	0e 94 91 00 	call	0x122	; 0x122 <lcd_init>
 440:	aa 24       	eor	r10, r10
 442:	bb 24       	eor	r11, r11
 444:	ee 24       	eor	r14, r14
 446:	ff 24       	eor	r15, r15
 448:	22 24       	eor	r2, r2
 44a:	33 24       	eor	r3, r3
 44c:	44 24       	eor	r4, r4
 44e:	55 24       	eor	r5, r5
 450:	66 24       	eor	r6, r6
 452:	77 24       	eor	r7, r7
 454:	88 24       	eor	r8, r8
 456:	99 24       	eor	r9, r9
 458:	00 e0       	ldi	r16, 0x00	; 0
 45a:	10 e0       	ldi	r17, 0x00	; 0
 45c:	cc 24       	eor	r12, r12
 45e:	dd 24       	eor	r13, r13
 460:	1a 82       	std	Y+2, r1	; 0x02
 462:	19 82       	std	Y+1, r1	; 0x01
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
 464:	22 e2       	ldi	r18, 0x22	; 34
 466:	27 b9       	out	0x07, r18	; 7
 ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 468:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
 46a:	34 9b       	sbis	0x06, 4	; 6
 46c:	fe cf       	rjmp	.-4      	; 0x46a <__stack+0xb>
 a=ADCH;
 46e:	45 b1       	in	r20, 0x05	; 5
 ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 470:	34 9a       	sbi	0x06, 4	; 6

	int max = 0;
	int max1 = 0;
 while(1)
 {            
	sensor1=ADC_Conversion(2);
 472:	40 93 70 00 	sts	0x0070, r20
	lcd_print(1,1,sensor1,3);
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	23 e0       	ldi	r18, 0x03	; 3
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_print>
		 error4 = error3;
		 error3 = error2;
		 error2 = error1;
		 error1 = error;
		 
		 error  = (sensor1 - 140);
 484:	e0 91 70 00 	lds	r30, 0x0070
 488:	4e 2f       	mov	r20, r30
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	4c 58       	subi	r20, 0x8C	; 140
 48e:	50 40       	sbci	r21, 0x00	; 0
 490:	5c 83       	std	Y+4, r21	; 0x04
 492:	4b 83       	std	Y+3, r20	; 0x03
		 error_i = (error1 + error2 + error3 + error4 + error5 + error6 + error7 + error8 + error9);
		 error_d = (error-error1);

		 Disturbance_temp = ((error*kp) + (error_i*ki) + (error_d*kd));
 494:	ca 01       	movw	r24, r20
 496:	8e 19       	sub	r24, r14
 498:	9f 09       	sbc	r25, r15
 49a:	bc 01       	movw	r22, r24
 49c:	a4 e1       	ldi	r26, 0x14	; 20
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	6a 9f       	mul	r22, r26
 4a2:	c0 01       	movw	r24, r0
 4a4:	6b 9f       	mul	r22, r27
 4a6:	90 0d       	add	r25, r0
 4a8:	7a 9f       	mul	r23, r26
 4aa:	90 0d       	add	r25, r0
 4ac:	11 24       	eor	r1, r1
 4ae:	6c ed       	ldi	r22, 0xDC	; 220
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	46 9f       	mul	r20, r22
 4b4:	90 01       	movw	r18, r0
 4b6:	47 9f       	mul	r20, r23
 4b8:	30 0d       	add	r19, r0
 4ba:	56 9f       	mul	r21, r22
 4bc:	30 0d       	add	r19, r0
 4be:	11 24       	eor	r1, r1
 4c0:	82 0f       	add	r24, r18
 4c2:	93 1f       	adc	r25, r19
 4c4:	97 01       	movw	r18, r14
 4c6:	2a 0d       	add	r18, r10
 4c8:	3b 1d       	adc	r19, r11
 4ca:	22 0d       	add	r18, r2
 4cc:	33 1d       	adc	r19, r3
 4ce:	24 0d       	add	r18, r4
 4d0:	35 1d       	adc	r19, r5
 4d2:	26 0d       	add	r18, r6
 4d4:	37 1d       	adc	r19, r7
 4d6:	28 0d       	add	r18, r8
 4d8:	39 1d       	adc	r19, r9
 4da:	20 0f       	add	r18, r16
 4dc:	31 1f       	adc	r19, r17
 4de:	2c 0d       	add	r18, r12
 4e0:	3d 1d       	adc	r19, r13
 4e2:	a9 81       	ldd	r26, Y+1	; 0x01
 4e4:	ba 81       	ldd	r27, Y+2	; 0x02
 4e6:	2a 0f       	add	r18, r26
 4e8:	3b 1f       	adc	r19, r27
 4ea:	a9 01       	movw	r20, r18
 4ec:	75 e0       	ldi	r23, 0x05	; 5
 4ee:	44 0f       	add	r20, r20
 4f0:	55 1f       	adc	r21, r21
 4f2:	7a 95       	dec	r23
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <__stack+0x8f>
 4f6:	22 0f       	add	r18, r18
 4f8:	33 1f       	adc	r19, r19
 4fa:	42 1b       	sub	r20, r18
 4fc:	53 0b       	sbc	r21, r19
 4fe:	84 0f       	add	r24, r20
 500:	95 1f       	adc	r25, r21
 502:	90 93 61 00 	sts	0x0061, r25
 506:	80 93 60 00 	sts	0x0060, r24
		 Disturbance = (unsigned int) Disturbance_temp;
		 Disturbance = (Disturbance /500 ) ;
 50a:	64 ef       	ldi	r22, 0xF4	; 244
 50c:	71 e0       	ldi	r23, 0x01	; 1
 50e:	0e 94 b2 02 	call	0x564	; 0x564 <__udivmodhi4>
 512:	60 93 6b 00 	sts	0x006B, r22
 516:	70 93 6c 00 	sts	0x006C, r23
		 vel= (char)Disturbance;
 51a:	60 93 66 00 	sts	0x0066, r22
	//	lcd_print(2,13,BATT_Voltage,4);
		if ( error < 0 ) {
			error *= -1;
		}
	//cd_print(2,1,error,4);
		if(sensor1 > 140)
 51e:	ed 38       	cpi	r30, 0x8D	; 141
 520:	20 f0       	brcs	.+8      	; 0x52a <__stack+0xcb>
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 522:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 524:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 526:	89 60       	ori	r24, 0x09	; 9
 528:	03 c0       	rjmp	.+6      	; 0x530 <__stack+0xd1>
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 52a:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 52c:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 52e:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
 530:	88 bb       	out	0x18, r24	; 24
 532:	2b 81       	ldd	r18, Y+3	; 0x03
 534:	3c 81       	ldd	r19, Y+4	; 0x04
 536:	37 ff       	sbrs	r19, 7
 538:	03 c0       	rjmp	.+6      	; 0x540 <__stack+0xe1>
 53a:	30 95       	com	r19
 53c:	21 95       	neg	r18
 53e:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		else
		{
		 forward();
		}
		velocity(100+vel,100+vel);
 540:	86 2f       	mov	r24, r22
 542:	8c 59       	subi	r24, 0x9C	; 156
 ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 return a;
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
 544:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor;     // duty cycle 'ON' period of PWM out for Left motor 
 546:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
 548:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;    // duty cycle 'ON' period of PWM out for Right motor 
 54a:	88 bd       	out	0x28, r24	; 40
 54c:	ba 82       	std	Y+2, r11	; 0x02
 54e:	a9 82       	std	Y+1, r10	; 0x01
 550:	c8 01       	movw	r24, r16
 552:	84 01       	movw	r16, r8
 554:	43 01       	movw	r8, r6
 556:	32 01       	movw	r6, r4
 558:	21 01       	movw	r4, r2
 55a:	17 01       	movw	r2, r14
 55c:	56 01       	movw	r10, r12
 55e:	79 01       	movw	r14, r18
 560:	6c 01       	movw	r12, r24
 562:	80 cf       	rjmp	.-256    	; 0x464 <__stack+0x5>

00000564 <__udivmodhi4>:
 564:	aa 1b       	sub	r26, r26
 566:	bb 1b       	sub	r27, r27
 568:	51 e1       	ldi	r21, 0x11	; 17
 56a:	07 c0       	rjmp	.+14     	; 0x57a <__udivmodhi4_ep>

0000056c <__udivmodhi4_loop>:
 56c:	aa 1f       	adc	r26, r26
 56e:	bb 1f       	adc	r27, r27
 570:	a6 17       	cp	r26, r22
 572:	b7 07       	cpc	r27, r23
 574:	10 f0       	brcs	.+4      	; 0x57a <__udivmodhi4_ep>
 576:	a6 1b       	sub	r26, r22
 578:	b7 0b       	sbc	r27, r23

0000057a <__udivmodhi4_ep>:
 57a:	88 1f       	adc	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	5a 95       	dec	r21
 580:	a9 f7       	brne	.-22     	; 0x56c <__udivmodhi4_loop>
 582:	80 95       	com	r24
 584:	90 95       	com	r25
 586:	bc 01       	movw	r22, r24
 588:	cd 01       	movw	r24, r26
 58a:	08 95       	ret

0000058c <_exit>:
 58c:	f8 94       	cli

0000058e <__stop_program>:
 58e:	ff cf       	rjmp	.-2      	; 0x58e <__stop_program>
